# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: frontend-ingress
#   namespace: default
#   annotations:
#     kubernetes.io/ingress.class: alb # Required to use the AWS ALB Ingress Controller
#     alb.ingress.kubernetes.io/scheme: internet-facing # Expose the ALB to the internet
#     alb.ingress.kubernetes.io/target-type: ip # Route traffic to Kubernetes Pod IPs (or "instance" for NodePort)
#     alb.ingress.kubernetes.io/healthcheck-path: /_healthz # Custom health check path
#     alb.ingress.kubernetes.io/healthcheck-port: "8080" # Health check port
#     alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]' # Listen on ports 80 (HTTP) and 443 (HTTPS)
#     alb.ingress.kubernetes.io/actions.ssl-redirect: '{"Type": "redirect", "RedirectConfig": { "Protocol": "HTTPS", "Port": "443", "StatusCode": "HTTP_301"}}' # Redirect HTTP to HTTPS
#     cert-manager.io/cluster-issuer: letsencrypt # Use cert-manager to provision TLS certificates
# spec:
#   rules:
#     - host: frontend.cloudops.quest # Replace with your domain
#       http:
#         paths:
#           - path: /
#             pathType: Prefix
#             backend:
#               service:
#                 name: frontend
#                 port:
#                   number: 80
#   tls:
#     - hosts:
#         - frontend.cloudops.quest
#       secretName: frontend-tls # Secret to store the TLS certificate
# ~
# ~


apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: argocd-ingress
  namespace: argocd
  annotations:
    kubernetes.io/ingress.class: "nginx"                     # Use NGINX Ingress Controller
    nginx.ingress.kubernetes.io/ssl-redirect: "true"        # Redirect HTTP to HTTPS
    cert-manager.io/cluster-issuer: "letsencrypt"           # cert-manager ClusterIssuer
spec:
  rules:
    - host: argocd.cloudops.quest                            # Replace with your domain
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: argocd-server                         # Argo CD service name
                port:
                  number: 80
  tls:
    - hosts:
        - argocd.cloudops.quest
      secretName: argocd-tls                                # cert-manager will create this secret

