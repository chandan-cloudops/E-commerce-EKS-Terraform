name: Reusable Deployment Workflow

on:
  workflow_call:
    inputs:
      environment:
        description: "Target environment (staging, production, etc.)"
        required: true
        type: string
      env_id:
        description: "Short identifier for the environment"
        required: true
        type: string
      ref:
        description: "Git commit SHA or ref to deploy"
        required: true
        type: string
    secrets:
      GIT_USERNAME:
        required: true
      GIT_PASSWORD:
        required: true
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_TOKEN:
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}   # ‚úÖ added environment here
    steps:
      - name: Checkout backend repo
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ref }}

      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      # - name: Build and push Docker images
      #   run: |
      #     # DOCKER_HUB=${{ secrets.DOCKERHUB_USERNAME }}
      #     DOCKER_HUB=cloudops96
      #     BUILD_TAG=${{ github.run_number }}   # ‚úÖ use build number instead of sha
      #     SERVICES="adservice emailservice productcatalogservice cartservice frontend recommendationservice checkoutservice loadgenerator shippingservice currencyservice paymentservice shoppingassistantservice"
          
      #     for service in $SERVICES; do
      #       echo "üöÄ Building and pushing $service:$BUILD_TAG..."
      #       if [ "$service" = "cartservice" ]; then
      #         docker build -t $DOCKER_HUB/private:$service-$BUILD_TAG ./src/$service/src
      #       else
      #         docker build -t $DOCKER_HUB/private:$service-$BUILD_TAG ./src/$service
      #       fi
      #       docker push $DOCKER_HUB/private:$service-$BUILD_TAG
      #     done

  modify_git:
    needs: build
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout deployment repo (staging branch)
        uses: actions/checkout@v3
        with:
          repository: chandan-cloudops/Production_Grade_CICD_GitHub_Action
          ref: staging
          token: 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
          # ${{ secrets.GIT_PASSWORD }}
          fetch-depth: 0

      - name: Update Kubernetes manifests
        run: |
          # DOCKER_HUB=${{ secrets.DOCKERHUB_USERNAME }}
          DOCKER_HUB=cloudops96
          BUILD_TAG=${{ github.run_number }}   # ‚úÖ use build number
          SERVICES="adservice emailservice productcatalogservice cartservice frontend recommendationservice checkoutservice loadgenerator shippingservice currencyservice paymentservice shoppingassistantservice"
      
          for service in $SERVICES; do
            FILE="kubernetes-manifests/${service}.yaml"
            if [ -f "$FILE" ]; then
              echo "üîÑ Updating $FILE..."
              sed -i "s|image: .*|image: $DOCKER_HUB/private:$service-$BUILD_TAG|g" "$FILE"
            else
              echo "‚ö†Ô∏è $FILE not found. Skipping..."
            fi
          done

      - name: Commit and push changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add kubernetes-manifests/
          git commit -m "Update manifests with new images (build #${{ github.run_number }}) [skip ci]" || echo "No changes to commit"
          git push origin staging

      - name: Create PR from staging ‚Üí main
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GIT_PASSWORD }}
          repository: chandan-cloudops/Production_Grade_CICD_GitHub_Action
          commit-message: "Sync deployment manifests (build #${{ github.run_number }})"
          branch: staging
          base: main
          title: "Sync manifests from staging to main (build #${{ github.run_number }})"
          body: |
            This PR updates deployment manifests in main branch with the latest Docker images built from build #${{ github.run_number }}.
