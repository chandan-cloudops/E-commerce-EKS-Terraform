name: Reusable deployment Workflow

on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
        description: Name of the target environment (e.g., production, staging).
      env_id:
        type: string
        required: true
        description: Short identifier for environment (e.g., prd, stg).
      ref:
        type: string
        required: true
        description: The tag or SHA to checkout.
      folder:                    # ✅ FIXED
        type: string
        required: true
        description: Deployment folder path.
      branch:                    # ✅ FIXED
        type: string
        required: true
        description: Branch to checkout for deployment repo.
      base_files:                # ✅ FIXED
        type: string
        required: true
        description: Space-separated list of base YAML file names.
    secrets:
      ACCESS_TOKEN:
        required: true
      GIT_USERNAME:
        required: true
      GIT_PASSWORD:
        required: true

env:
  REGION: europe-west3
  PROJECT: lianecare-342010
  ARTIFACT_REPO: solace
  PLATFORM: linux/amd64

jobs:
  lianecare_backend_workflow:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ref }}

      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v1.3.0
        with:
          token_format: access_token
          credentials_json: '${{ secrets.ACCESS_TOKEN }}'

      - name: Docker Auth
        uses: docker/login-action@v2.2.0
        with:
          username: oauth2accesstoken
          password: '${{ steps.auth.outputs.access_token }}'
          registry: '${{ env.REGION }}-docker.pkg.dev'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2.10.0
        with:
          driver-opts: network=host

      - name: Build and Push Docker image to Artifact Registry
        run: |
          BUILD_TAG="${{ inputs.env_id }}-${{ github.run_number }}"
          docker buildx build --platform ${{ env.PLATFORM }} \
            -f compose/production/django/Dockerfile \
            -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT }}/${{ env.ARTIFACT_REPO }}/${{ env.ARTIFACT_REPO }}:${BUILD_TAG} \
            --push .

  modify_git:
    needs: lianecare_backend_workflow
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout deployment repo
        uses: actions/checkout@v3
        with:
          repository: Lianecare/cicd-argo-cd
          ref: ${{ inputs.branch }}
          token: ${{ secrets.GIT_PASSWORD }}
          fetch-depth: 0

      - name: Update selected YAML manifests with new image tag
        run: |
          BUILD_TAG="${{ inputs.env_id }}-${{ github.run_number }}"
          IMAGE="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT }}/${{ env.ARTIFACT_REPO }}/${{ env.ARTIFACT_REPO }}:${BUILD_TAG}"

          for base in ${{ inputs.base_files }}; do
            TARGET="${{ inputs.folder }}/${base}-${{ inputs.env_id }}.yml"
            if [[ -f "$TARGET" ]]; then
              sed -i "s|${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT }}/${{ env.ARTIFACT_REPO }}/${{ env.ARTIFACT_REPO }}:[^[:space:]]*|$IMAGE|g" "$TARGET"
              git add "$TARGET"
            else
              echo "$TARGET not found, skipping..."
            fi
          done

      - name: Commit and push updated manifests
        run: |
          git config --local user.name "${{ github.actor }}"
          git config --local user.email "${{ github.actor }}@users.noreply.github.com"
          git add "${{ inputs.folder }}/"
          git commit -m "Update manifests in ${{ inputs.folder }} with new image (build #${{ github.run_number }}) [skip ci]" || echo "No changes to commit"
          git push origin HEAD

      - name: Create PR (production only)
        if: ${{ inputs.environment == 'production' }}
        run: |
          IMAGE="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT }}/${{ env.ARTIFACT_REPO }}/${{ env.ARTIFACT_REPO }}:${{ inputs.env_id }}-${{ github.run_number }}"
          gh pr create \
            --repo Lianecare/cicd-argo-cd \
            --head ${{ inputs.branch }} \
            --base main \
            --title "Sync manifests to production (build #${{ github.run_number }})" \
            --body "This PR updates deployment manifests with the latest Artifact Registry image: $IMAGE"
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_PASSWORD }}
