# name: Reusable Deployment Workflow

# on:
#   workflow_call:
#     inputs:
#       environment:
#         description: "Target environment (staging, production, etc.)"
#         required: true
#         type: string
#       env_id:
#         description: "Short identifier for the environment (e.g., stage, prod)"
#         required: true
#         type: string
#       ref:
#         description: "Git commit SHA or ref to deploy"
#         required: true
#         type: string
#     secrets:
#       GIT_USERNAME:
#         required: true
#       GIT_PASSWORD:
#         required: true
#       GIT_TOKEN:   # ‚úÖ optional fallback PAT
#         required: false
#       DOCKERHUB_USERNAME:
#         required: true
#       DOCKERHUB_TOKEN:
#         required: true

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     environment: ${{ inputs.environment }}  
#     steps:
#       - name: Checkout backend repo
#         uses: actions/checkout@v3
#         with:
#           ref: ${{ inputs.ref }}

#       - name: Log in to DockerHub
#         run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

#       # - name: Build and push Docker images
#       #   run: |
#       #     DOCKER_HUB=cloudops96
#       #     BUILD_TAG="${{ inputs.env_id }}-${{ github.run_number }}"
#       #     echo "üìå Using image tag: $BUILD_TAG"
      
#       #     SERVICES="adservice emailservice productcatalogservice cartservice frontend recommendationservice checkoutservice loadgenerator shippingservice currencyservice paymentservice shoppingassistantservice"
          
#       #     for service in $SERVICES; do
#       #       echo "üöÄ Building and pushing $service:$BUILD_TAG..."
#       #       if [ "$service" = "cartservice" ]; then
#       #         docker build -t $DOCKER_HUB/private:$service-$BUILD_TAG ./src/$service/src
#       #       else
#       #         docker build -t $DOCKER_HUB/private:$service-$BUILD_TAG ./src/$service
#       #       fi
#       #       docker push $DOCKER_HUB/private:$service-$BUILD_TAG
#       #     done

#   modify_git:
#     needs: build
#     runs-on: ubuntu-latest
#     environment: ${{ inputs.environment }}
#     steps:
#       - name: Checkout deployment repo
#         uses: actions/checkout@v3
#         with:
#           repository: chandan-cloudops/Production_Grade_CICD_GitHub_Action
#           ref: ${{ inputs.environment == 'production' && 'releasing' || 'staging' }}
#           token: ${{ secrets.GIT_PASSWORD }}
#           fetch-depth: 0
  
#       - name: Update Kubernetes manifests
#         run: |
#           DOCKER_HUB=cloudops96
#           BUILD_TAG="${{ inputs.env_id }}-${{ github.run_number }}"
#           echo "üìå Updating manifests with tag: $BUILD_TAG"

#           # Map env_id to folder
#           if [ "${{ inputs.env_id }}" = "prod" ]; then
#             FOLDER="production_deployment_files"
#           else
#             FOLDER="staging_deployments_files"
#           fi
  
#           SERVICES="adservice emailservice productcatalogservice cartservice frontend recommendationservice checkoutservice loadgenerator shippingservice currencyservice paymentservice shoppingassistantservice"
      
#           for service in $SERVICES; do
#             FILE="$FOLDER/${service}-${{ inputs.env_id }}.yaml"
#             if [ -f "$FILE" ]; then
#               echo "üîÑ Updating $FILE..."
#               sed -i "s|image: .*|image: $DOCKER_HUB/private:$service-$BUILD_TAG|g" "$FILE"
#             else
#               echo "‚ö†Ô∏è $FILE not found. Skipping..."
#             fi
#           done

 
#       - name: Commit and push updated manifests
#         run: |
#           git config --local user.name "${{ github.actor }}"
#           git config --local user.email "${{ github.actor }}@users.noreply.github.com"

#           if [ "${{ inputs.env_id }}" = "prod" ]; then
#             git add production_deployment_files/
#           else
#             git add staging_deployments_files/
#           fi

#           git status
#           git diff --cached
#           git commit -m "Update manifests with new images (build #${{ github.run_number }}) [skip ci]" || echo "No changes to commit"
#           git push origin HEAD
      
#       - name: Create PR (production only)
#         if: ${{ inputs.env_id == 'prod' }}
#         run: |
#           gh pr create \
#             --repo chandan-cloudops/Production_Grade_CICD_GitHub_Action \
#             --head releasing \
#             --base main \
#             --title "Sync manifests from releasing to main (build #${{ github.run_number }})" \
#             --body "This PR updates deployment manifests in main branch with the latest Docker images built from build #${{ github.run_number }}."
#         env:
#           GITHUB_TOKEN: ${{ secrets.GIT_PASSWORD }}   # PAT with repo scope




name: Reusable Deployment Workflow

on:
  workflow_call:
    inputs:
      environment:
        description: "Target environment (staging, production, etc.)"
        required: true
        type: string
      env_id:
        description: "Short identifier for the environment (e.g., stage, prod)"
        required: true
        type: string
      ref:
        description: "Git commit SHA or ref to deploy"
        required: true
        type: string
    secrets:
      GIT_USERNAME:
        required: true
      GIT_PASSWORD:
        required: true
      GIT_TOKEN:   
        required: false
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_TOKEN:
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    outputs:
      image_tag: ${{ steps.build-and-push.outputs.image_tag }}   # üëà expose tag as job output
    steps:
      - name: Checkout backend repo
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ref }}

      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build and push Docker images
        id: build-and-push  
        run: |
          DOCKER_HUB=cloudops96
          BUILD_TAG="${{ inputs.env_id }}-${{ github.run_number }}"
      
          SERVICES="adservice emailservice productcatalogservice cartservice frontend recommendationservice checkoutservice loadgenerator shippingservice currencyservice paymentservice shoppingassistantservice"
          
          for service in $SERVICES; do
            echo "üöÄ Building and pushing $service:$BUILD_TAG..."
            if [ "$service" = "cartservice" ]; then
              docker build -t $DOCKER_HUB/private:$service-$BUILD_TAG ./src/$service/src
            else
              docker build -t $DOCKER_HUB/private:$service-$BUILD_TAG ./src/$service
            fi
            docker push $DOCKER_HUB/private:$service-$BUILD_TAG
          done

  modify_git:
    needs: build
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout deployment repo
        uses: actions/checkout@v3
        with:
          repository: chandan-cloudops/Production_Grade_CICD_GitHub_Action
          ref: ${{ inputs.environment == 'production' && 'releasing' || 'staging' }}
          token: ${{ secrets.GIT_PASSWORD }}
          fetch-depth: 0
  
      - name: Update Kubernetes manifests
        run: |
          DOCKER_HUB=cloudops96
          BUILD_TAG="${{ needs.build.outputs.image_tag }}"   # üëà use job output

          # Map env_id to folder
          if [ "${{ inputs.env_id }}" = "prod" ]; then
            FOLDER="production_deployment_files"
          else
            FOLDER="staging_deployments_files"
          fi
  
          SERVICES="adservice emailservice productcatalogservice cartservice frontend recommendationservice checkoutservice loadgenerator shippingservice currencyservice paymentservice shoppingassistantservice"
      
          for service in $SERVICES; do
            FILE="$FOLDER/${service}-${{ inputs.env_id }}.yaml"
            if [ -f "$FILE" ]; then
              sed -i "s|image: .*|image: $DOCKER_HUB/private:$service-$BUILD_TAG|g" "$FILE"
            else
               echo "‚ö†Ô∏è $FILE not found. Skipping..."

            fi
          done
 
      - name: Commit and push updated manifests
        run: |
          git config --local user.name "${{ github.actor }}"
          git config --local user.email "${{ github.actor }}@users.noreply.github.com"

          if [ "${{ inputs.env_id }}" = "prod" ]; then
            git add production_deployment_files/
          else
            git add staging_deployments_files/
          fi

          git status
          git diff --cached
          git commit -m "Update manifests with new images (${{ needs.build.outputs.image_tag }}) [skip ci]" || echo "No changes to commit"
          git push origin HEAD
      
      - name: Create or update PR (production only)
        if: ${{ inputs.environment == 'production' }}
        run: |
          IMAGE_TAG="${{ needs.build.outputs.image_tag }}"      
          PR_NUMBER=$(gh pr list \
            --repo https://github.com/chandan-cloudops/Production_Grade_CICD_GitHub_Action.git \
            --head releasing \
            --base main \
            --state open \
            --json number -q '.[0].number')
      
          TITLE="Sync manifests to production (build #${{ github.run_number }})"
          BODY="This PR updates deployment manifests with the latest image: $IMAGE_TAG"
      
          if [ -n "$PR_NUMBER" ]; then
            gh pr edit "$PR_NUMBER" --title "$TITLE" --body "$BODY"
          else
            gh pr create --repo Lianecare/cicd-argo-cd \
              --head releasing --base main \
              --title "$TITLE" --body "$BODY"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_PASSWORD }}
      
